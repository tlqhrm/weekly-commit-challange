# 더 정확한 커밋 수집을 위한 고급 워크플로우

      - name: Enhanced commit checking with multiple APIs
        id: enhanced_check_commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          USERNAME="${{ github.repository_owner }}"
          EXCLUDED_REPOS="weekly-commit-challenge"
          
          # 주차 계산 (기존과 동일)
          CURRENT_WEEKDAY=$(TZ='Asia/Seoul' date '+%u')
          if [ "$CURRENT_WEEKDAY" -eq 1 ]; then
            WEEK_START=$(TZ='Asia/Seoul' date -d '7 days ago' '+%Y-%m-%d')
            WEEK_END=$(TZ='Asia/Seoul' date -d '1 day ago' '+%Y-%m-%d')
          else
            DAYS_SINCE_MONDAY=$((CURRENT_WEEKDAY - 1))
            WEEK_START=$(TZ='Asia/Seoul' date -d "$DAYS_SINCE_MONDAY days ago" '+%Y-%m-%d')
            WEEK_END=$(TZ='Asia/Seoul' date -d '1 day ago' '+%Y-%m-%d')
          fi
          
          SINCE_DATE=$(TZ='Asia/Seoul' date -d "$WEEK_START 00:00:00" -Iseconds)
          UNTIL_DATE=$(TZ='Asia/Seoul' date -d "$WEEK_END 23:59:59" -Iseconds)
          
          echo "🔍 다중 API로 정확한 커밋 수 확인 중..."
          echo "기간: $WEEK_START ~ $WEEK_END"
          
          # 방법 1: GraphQL API (가장 정확)
          echo "📊 1. GraphQL API로 커밋 수 확인..."
          GRAPHQL_QUERY=$(cat <<'EOF'
          {
            "query": "query($username: String!, $from: DateTime!, $to: DateTime!) { user(login: $username) { contributionsCollection(from: $from, to: $to) { totalCommitContributions commitContributionsByRepository { repository { name owner { login } } contributions { totalCount } } } } }",
            "variables": {
              "username": "'"$USERNAME"'",
              "from": "'"$SINCE_DATE"'", 
              "to": "'"$UNTIL_DATE"'"
            }
          }
EOF
          )
          
          GRAPHQL_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY" \
            "https://api.github.com/graphql")
          
          GRAPHQL_COUNT=$(echo "$GRAPHQL_RESPONSE" | jq --arg excluded "$EXCLUDED_REPOS" '
            .data.user.contributionsCollection.commitContributionsByRepository
            | map(select(.repository.name as $repo_name | ($excluded | split(",") | index($repo_name) | not)))
            | map(.contributions.totalCount)
            | add // 0
          ')
          
          echo "   GraphQL 결과: $GRAPHQL_COUNT 커밋"
          
          # 방법 2: Search API (검증용)
          echo "🔍 2. Search API로 검증..."
          SEARCH_QUERY="author:$USERNAME committer-date:${WEEK_START}..${WEEK_END}"
          SEARCH_RESPONSE=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/search/commits?q=$(echo "$SEARCH_QUERY" | sed 's/ /%20/g')")
          
          SEARCH_COUNT=$(echo "$SEARCH_RESPONSE" | jq '.total_count // 0')
          echo "   Search API 결과: $SEARCH_COUNT 커밋"
          
          # 방법 3: Events API (기존 방식, 백업용)
          echo "📅 3. Events API로 백업 확인..."
          EVENTS_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/users/$USERNAME/events?per_page=100")
          
          EVENTS_COUNT=$(echo "$EVENTS_RESPONSE" | jq --arg since_date "$SINCE_DATE" --arg until_date "$UNTIL_DATE" --arg excluded "$EXCLUDED_REPOS" '
            [
              .[] 
              | select(.type == "PushEvent") 
              | select((.created_at | fromdateiso8601) >= ($since_date | fromdateiso8601))
              | select((.created_at | fromdateiso8601) <= ($until_date | fromdateiso8601))
              | select(.repo.name | split("/")[1] as $repo_name | ($excluded | split(",") | index($repo_name) | not))
              | .payload.commits[]?
              | select(.author.name != "GitHub" and .author.name != "github-actions[bot]")
            ] 
            | length
          ')
          
          echo "   Events API 결과: $EVENTS_COUNT 커밋"
          
          # 최종 커밋 수 결정 (우선순위: GraphQL > Search > Events)
          if [ "$GRAPHQL_COUNT" != "null" ] && [ "$GRAPHQL_COUNT" != "0" ]; then
            FINAL_COUNT=$GRAPHQL_COUNT
            METHOD="GraphQL"
          elif [ "$SEARCH_COUNT" != "null" ] && [ "$SEARCH_COUNT" != "0" ]; then
            FINAL_COUNT=$SEARCH_COUNT  
            METHOD="Search"
          else
            FINAL_COUNT=$EVENTS_COUNT
            METHOD="Events"
          fi
          
          echo ""
          echo "🎯 최종 결과:"
          echo "   사용된 방법: $METHOD API"
          echo "   커밋 수: $FINAL_COUNT"
          echo "   GraphQL: $GRAPHQL_COUNT | Search: $SEARCH_COUNT | Events: $EVENTS_COUNT"
          
          # 결과가 다르면 경고
          if [ "$GRAPHQL_COUNT" != "$SEARCH_COUNT" ] || [ "$SEARCH_COUNT" != "$EVENTS_COUNT" ]; then
            echo "⚠️ API별 결과가 다릅니다. 가장 신뢰할 수 있는 GraphQL 결과를 사용합니다."
          fi
          
          echo "commit_count=$FINAL_COUNT" >> $GITHUB_OUTPUT
          echo "method_used=$METHOD" >> $GITHUB_OUTPUT
          echo "graphql_count=$GRAPHQL_COUNT" >> $GITHUB_OUTPUT
          echo "search_count=$SEARCH_COUNT" >> $GITHUB_OUTPUT  
          echo "events_count=$EVENTS_COUNT" >> $GITHUB_OUTPUT
          echo "period_start=$WEEK_START" >> $GITHUB_OUTPUT
          echo "period_end=$WEEK_END" >> $GITHUB_OUTPUT
