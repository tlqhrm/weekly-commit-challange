name: Collect Fork Statistics

on:
  schedule:
    - cron: '0 * * * *'  # 매시간 실행
  workflow_dispatch:  # 수동 실행 가능

jobs:
  collect-statistics:
    runs-on: ubuntu-latest
    # fork에서는 실행하지 않음
    if: github.repository == 'tlqhrm/weekly-commit-challenge'
    permissions:
      contents: write
      issues: write
      pull-requests: read
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Collect fork statistics and save to issue
        id: collect_stats
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          node << 'EOF'
          const fs = require('fs');
          const https = require('https');
          
          // GitHub API 호출 함수 (GET/POST/PATCH 지원)
          function githubAPI(path, method = 'GET', body = null) {
              return new Promise((resolve, reject) => {
                  const options = {
                      hostname: 'api.github.com',
                      path: path,
                      method: method,
                      headers: {
                          'User-Agent': 'weekly-commit-challenge',
                          'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                          'Accept': 'application/vnd.github.v3+json'
                      }
                  };
                  
                  if (body) {
                      options.headers['Content-Type'] = 'application/json';
                  }
                  
                  const req = https.request(options, (res) => {
                      let data = '';
                      res.on('data', chunk => data += chunk);
                      res.on('end', () => {
                          if (res.statusCode >= 200 && res.statusCode < 300) {
                              resolve(data ? JSON.parse(data) : {});
                          } else {
                              reject(new Error(`API Error: ${res.statusCode} - ${data}`));
                          }
                      });
                  });
                  
                  req.on('error', reject);
                  
                  if (body) {
                      req.write(JSON.stringify(body));
                  }
                  
                  req.end();
              });
          }
          
          async function collectStatistics() {
              console.log('통계 수집 시작...');
              
              const stats = {
                  lastUpdated: new Date().toISOString(),
                  totalParticipants: 0,
                  activeParticipants: 0,
                  recordHolders: 0,
                  weeklySuccessful: 0,
                  participants: []
              };
              
              try {
                  // Fork 리스트 가져오기
                  let page = 1;
                  let allForks = [];
                  
                  while (true) {
                      const forks = await githubAPI(`/repos/tlqhrm/weekly-commit-challenge/forks?page=${page}&per_page=100`);
                      if (forks.length === 0) break;
                      allForks.push(...forks);
                      if (forks.length < 100) break;
                      page++;
                  }
                  
                  // 원본 레포지토리도 포함
                  const originalRepo = await githubAPI('/repos/tlqhrm/weekly-commit-challenge');
                  allForks.unshift({
                      owner: { login: 'tlqhrm', avatar_url: originalRepo.owner.avatar_url },
                      name: 'weekly-commit-challenge',
                      pushed_at: originalRepo.pushed_at
                  });
                  
                  stats.totalParticipants = allForks.length;
                  console.log(`총 ${allForks.length}개의 레포지토리 발견 (원본 포함)`);
                  
                  // 각 fork의 record.md 확인 (배치 처리)
                  for (let i = 0; i < allForks.length; i += 5) {
                      const batch = allForks.slice(i, i + 5);
                      
                      await Promise.all(batch.map(async (fork) => {
                          try {
                              let participantData = null;
                              
                              // 먼저 record.json 시도
                              try {
                                  const jsonResponse = await githubAPI(
                                      `/repos/${fork.owner.login}/${fork.name}/contents/record.json`
                                  );
                                  
                                  if (jsonResponse) {
                                      const jsonContent = Buffer.from(jsonResponse.content, 'base64').toString();
                                      const recordData = JSON.parse(jsonContent);
                                      
                                      if (recordData.records && recordData.records.length > 0) {
                                          const records = recordData.records;
                                          let currentStreak = 0;
                                          let maxStreak = 0;
                                          let tempStreak = 0;
                                          let successWeeks = 0;
                                          
                                          // 최신부터 역순으로 현재 연속 계산
                                          for (let i = records.length - 1; i >= 0; i--) {
                                              if (records[i].success) {
                                                  currentStreak++;
                                              } else {
                                                  break;
                                              }
                                          }
                                          
                                          // 최장 연속 계산
                                          for (const record of records) {
                                              if (record.success) {
                                                  tempStreak++;
                                                  maxStreak = Math.max(maxStreak, tempStreak);
                                                  successWeeks++;
                                              } else {
                                                  tempStreak = 0;
                                              }
                                          }
                                          
                                          const lastRecord = records[records.length - 1];
                                          const currentWeekSuccess = lastRecord ? lastRecord.success : false;
                                          const successRate = records.length > 0 ? Math.round((successWeeks / records.length) * 100 * 10) / 10 : 0;
                                          
                                          participantData = {
                                              username: fork.owner.login,
                                              avatarUrl: recordData.avatarUrl || fork.owner.avatar_url,
                                              lastPushed: fork.pushed_at,
                                              currentStreak: currentStreak,
                                              maxStreak: maxStreak,
                                              totalWeeks: records.length,
                                              successRate: successRate,
                                              currentWeekSuccess: currentWeekSuccess
                                          };
                                          
                                          if (currentWeekSuccess) stats.weeklySuccessful++;
                                          console.log(`${fork.owner.login}: record.json 사용 - ${records.length}주 기록`);
                                      }
                                  }
                              } catch (jsonError) {
                                  console.log(`${fork.owner.login}: record.json 없음, record.md 시도`);
                              }
                              
                              // record.json이 없으면 record.md 사용
                              if (!participantData) {
                                  const recordResponse = await githubAPI(
                                      `/repos/${fork.owner.login}/${fork.name}/contents/record.md`
                                  );
                                  
                                  if (recordResponse) {
                                      // record.md 내용 분석
                                      const content = Buffer.from(recordResponse.content, 'base64').toString();
                                      const lines = content.split('\\n');
                                      let currentStreak = 0;
                                      let totalWeeks = 0;
                                      let successWeeks = 0;
                                      let currentWeekSuccess = false;
                                      
                                      // 상세한 파싱으로 최장 연속 주차 계산
                                      const records = [];
                                      for (const line of lines) {
                                          if (line.includes('|') && !line.includes('---') && !line.includes('기간')) {
                                              totalWeeks++;
                                              const isSuccess = line.includes('✅');
                                              records.push({ success: isSuccess });
                                              
                                              if (isSuccess) {
                                                  successWeeks++;
                                                  if (totalWeeks === 1) currentWeekSuccess = true;
                                              }
                                          }
                                      }
                                      
                                      // 현재 연속 주차 및 최장 연속 주차 계산
                                      let maxStreak = 0;
                                      currentStreak = 0;
                                      let tempStreak = 0;
                                      
                                      // 최신부터 역순으로 현재 연속 계산
                                      for (let i = 0; i < records.length; i++) {
                                          if (records[i].success) {
                                              if (i === 0) currentStreak++;
                                              else if (currentStreak === i) currentStreak++;
                                              else break;
                                          } else {
                                              break;
                                          }
                                      }
                                      
                                      // 전체에서 최장 연속 계산
                                      for (const record of records) {
                                          if (record.success) {
                                              tempStreak++;
                                              maxStreak = Math.max(maxStreak, tempStreak);
                                          } else {
                                              tempStreak = 0;
                                          }
                                      }
                                      
                                      if (currentWeekSuccess) stats.weeklySuccessful++;
                                      
                                      // 성공률 계산
                                      const successRate = totalWeeks > 0 ? Math.round((successWeeks / totalWeeks) * 100 * 10) / 10 : 0;
                                      
                                      participantData = {
                                          username: fork.owner.login,
                                          avatarUrl: fork.owner.avatar_url,
                                          lastPushed: fork.pushed_at,
                                          currentStreak,
                                          maxStreak,
                                          totalWeeks,
                                          successRate,
                                          currentWeekSuccess
                                      };
                                      console.log(`${fork.owner.login}: record.md 사용`);
                                  }
                              }
                              
                              if (participantData) {
                                  stats.participants.push(participantData);
                              }
                          } catch (err) {
                              console.error(`${fork.owner.login} 처리 실패:`, err.message);
                          }
                      }));
                      
                      // API 제한 대비 지연
                      await new Promise(resolve => setTimeout(resolve, 500));
                  }
                  
                  // 평균 연속 주차 및 성공률 계산
                  if (stats.participants.length > 0) {
                      // 연속 주차가 0이 아닌 참여자들만으로 평균 계산 (실패한 사람 제외)
                      const activeParticipants = stats.participants.filter(p => p.currentStreak > 0);
                      const totalStreak = activeParticipants.reduce((sum, p) => sum + p.currentStreak, 0);
                      const totalSuccessRate = stats.participants.reduce((sum, p) => sum + p.successRate, 0);
                      
                      stats.averageStreak = activeParticipants.length > 0 ? Math.round(totalStreak / activeParticipants.length * 10) / 10 : 0;
                      stats.averageSuccessRate = Math.round(totalSuccessRate / stats.participants.length * 10) / 10;
                      
                      // 랭킹 데이터 생성 (연속 주차 순)
                      stats.rankingByStreak = [...stats.participants]
                          .sort((a, b) => b.currentStreak - a.currentStreak)
                          .slice(0, 20); // 상위 20명만
                      
                      // 랭킹 데이터 생성 (성공률 순)  
                      stats.rankingBySuccessRate = [...stats.participants]
                          .sort((a, b) => b.successRate - a.successRate)
                          .slice(0, 20); // 상위 20명만
                      
                      // 랭킹 데이터 생성 (최장 연속 주차 순)
                      stats.rankingByMaxStreak = [...stats.participants]
                          .sort((a, b) => b.maxStreak - a.maxStreak)
                          .slice(0, 20); // 상위 20명만
                  }
                  
                  // statistics.json 파일로 저장
                  console.log('statistics.json 파일에 통계 저장 중...');
                  
                  // 통계 데이터를 JSON 파일로 저장
                  const jsonData = JSON.stringify(stats, null, 2);
                  fs.writeFileSync('statistics.json', jsonData);
                  console.log('statistics.json 파일 저장 완료');
                  
                  console.log('통계 수집 및 저장 완료!');
                  
              } catch (error) {
                  console.error('통계 수집 실패:', error);
                  process.exit(1);
              }
          }
          
          collectStatistics();
          EOF
      
      - name: Commit statistics file
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add statistics.json
          
          if ! git diff --staged --quiet; then
            git commit -m "📊 Update statistics $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M')"
            git push
          else
            echo "통계 파일 변경사항 없음"
          fi