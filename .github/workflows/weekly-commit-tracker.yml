name: Weekly Commit Tracker

on:
  schedule:
    - cron: '55 * * * *'   # 매시간 55분 실행
  workflow_dispatch:

# 동시 실행 방지
concurrency:
  group: weekly-commit-${{ github.repository }}
  cancel-in-progress: false

jobs:
  track-commits:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Get current time and week info
        id: time_info
        run: |
          # 한국 시간 기준 현재 시각
          CURRENT_DATE_KST=$(TZ='Asia/Seoul' date '+%Y-%m-%d')
          CURRENT_WEEKDAY=$(TZ='Asia/Seoul' date '+%u')  # 1=월요일, 7=일요일
          CURRENT_TIME_KST=$(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S')
          
          echo "current_date=$CURRENT_DATE_KST" >> $GITHUB_OUTPUT
          echo "current_weekday=$CURRENT_WEEKDAY" >> $GITHUB_OUTPUT
          echo "current_time=$CURRENT_TIME_KST" >> $GITHUB_OUTPUT
          
          echo "현재 시각 (KST): $CURRENT_TIME_KST"
          echo "현재 요일: $CURRENT_WEEKDAY (1=월요일, 7=일요일)"

      - name: Calculate current week range
        id: week_range
        run: |
          CURRENT_DATE="${{ steps.time_info.outputs.current_date }}"
          CURRENT_WEEKDAY="${{ steps.time_info.outputs.current_weekday }}"
          
          # 이번 주 월요일 계산
          DAYS_TO_MONDAY=$((CURRENT_WEEKDAY - 1))
          WEEK_START=$(TZ='Asia/Seoul' date -d "$CURRENT_DATE - $DAYS_TO_MONDAY days" '+%Y-%m-%d')
          
          # 이번 주 일요일 계산
          DAYS_TO_SUNDAY=$((7 - CURRENT_WEEKDAY))
          WEEK_END=$(TZ='Asia/Seoul' date -d "$CURRENT_DATE + $DAYS_TO_SUNDAY days" '+%Y-%m-%d')
          
          # 주차 번호 계산 (ISO 8601 기준)
          WEEK_NUMBER=$(node -e "
            const date = new Date('$CURRENT_DATE');
            const target = new Date(date.valueOf());
            const dayNr = (date.getDay() + 6) % 7;
            target.setDate(target.getDate() - dayNr + 3);
            const jan4 = new Date(target.getFullYear(), 0, 4);
            const dayDiff = (target - jan4) / 86400000;
            console.log(1 + Math.floor(dayDiff / 7));
          ")
          
          YEAR=$(TZ='Asia/Seoul' date '+%Y')
          
          echo "week_start=$WEEK_START" >> $GITHUB_OUTPUT
          echo "week_end=$WEEK_END" >> $GITHUB_OUTPUT
          echo "week_number=$WEEK_NUMBER" >> $GITHUB_OUTPUT
          echo "year=$YEAR" >> $GITHUB_OUTPUT
          
          echo "이번 주: $WEEK_START ~ $WEEK_END (${YEAR}년 ${WEEK_NUMBER}주차)"

      - name: Initialize Fork user records (early)
        if: github.repository_owner != 'tlqhrm'
        run: |
          USERNAME="${{ github.repository_owner }}"
          
          echo "Fork 사용자 ($USERNAME) 감지 - 조기 초기화"
          
          # Fork 사용자 초기화 처리
          if [ -f record.json ]; then
            EXISTING_USERNAME=$(cat record.json | jq -r '.username // empty' 2>/dev/null || echo "empty")
            
            if [ "$EXISTING_USERNAME" != "$USERNAME" ] && [ "$EXISTING_USERNAME" != "empty" ]; then
              echo "WARNING: 다른 사용자($EXISTING_USERNAME)의 기록 발견 - 완전 초기화"
              rm -f record.json record.md
              echo "기존 기록 완전 초기화 완료"
            fi
          fi
          
          # statistics 워크플로우 제거
          if [ -f .github/workflows/collect-statistics.yml ]; then
            rm -f .github/workflows/collect-statistics.yml
            echo "collect-statistics.yml 워크플로우 제거 완료"
          fi

      - name: Check existing records
        id: existing_records
        run: |
          USERNAME="${{ github.repository_owner }}"
          
          # record.json 파일이 있는지 확인
          if [ -f record.json ]; then
            echo "기존 record.json 발견"
            
            # 마지막 기록의 주차 정보 추출
            LAST_WEEK_START=$(cat record.json | jq -r '.records[-1].weekStart // empty')
            LAST_WEEK_END=$(cat record.json | jq -r '.records[-1].weekEnd // empty')
            RECORD_COUNT=$(cat record.json | jq '.records | length')
            
            echo "last_week_start=$LAST_WEEK_START" >> $GITHUB_OUTPUT
            echo "last_week_end=$LAST_WEEK_END" >> $GITHUB_OUTPUT
            echo "record_count=$RECORD_COUNT" >> $GITHUB_OUTPUT
            echo "has_records=true" >> $GITHUB_OUTPUT
            
            echo "기존 기록: $RECORD_COUNT개, 마지막 주: $LAST_WEEK_START ~ $LAST_WEEK_END"
          else
            echo "기존 기록 없음 - 첫 번째 기록 생성 예정"
            echo "last_week_start=" >> $GITHUB_OUTPUT
            echo "last_week_end=" >> $GITHUB_OUTPUT
            echo "record_count=0" >> $GITHUB_OUTPUT
            echo "has_records=false" >> $GITHUB_OUTPUT
          fi

      - name: Check skip conditions
        id: skip_check
        run: |
          CURRENT_WEEKDAY="${{ steps.time_info.outputs.current_weekday }}"
          CURRENT_HOUR=$(TZ='Asia/Seoul' date '+%H')
          
          echo "정상 실행 - 스킵 로직 제거"
          echo "should_skip=false" >> $GITHUB_OUTPUT

      - name: Check if new record needed
        id: should_add_record
        if: steps.skip_check.outputs.should_skip == 'false'
        run: |
          # 테스트된 로직 적용 (단순화)
          CURRENT_WEEK_START="${{ steps.week_range.outputs.week_start }}"
          LAST_WEEK_START="${{ steps.existing_records.outputs.last_week_start }}"
          LAST_WEEK_END="${{ steps.existing_records.outputs.last_week_end }}"
          HAS_RECORDS="${{ steps.existing_records.outputs.has_records }}"
          CURRENT_DATE="${{ steps.time_info.outputs.current_date }}"
          
          echo "새 기록 추가 필요성 검사..."
          echo "현재 주 시작: $CURRENT_WEEK_START"
          echo "마지막 기록 주 시작: $LAST_WEEK_START"
          echo "마지막 기록 주 종료: $LAST_WEEK_END"
          
          # 1. 첫 번째 기록이면 무조건 추가
          if [ "$HAS_RECORDS" = "false" ]; then
            echo "첫 번째 기록 - 추가 필요"
            echo "should_add=true" >> $GITHUB_OUTPUT
            echo "reason=첫 번째 기록" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 2. 새로운 주인지 확인
          if [ "$CURRENT_DATE" \> "$LAST_WEEK_END" ]; then
            IS_NEW_WEEK=true
            echo "새로운 주: true (현재: $CURRENT_DATE > 마지막 종료: $LAST_WEEK_END)"
          else
            IS_NEW_WEEK=false
            echo "새로운 주: false (현재: $CURRENT_DATE <= 마지막 종료: $LAST_WEEK_END)"
          fi
          
          # 3. 같은 주 기록이 있는지 확인
          if [ "$CURRENT_WEEK_START" = "$LAST_WEEK_START" ]; then
            IS_SAME_WEEK=true
            echo "같은 주 기록 존재: true (현재 시작: $CURRENT_WEEK_START = 마지막 시작: $LAST_WEEK_START)"
          else
            IS_SAME_WEEK=false
            echo "같은 주 기록 존재: false (현재 시작: $CURRENT_WEEK_START != 마지막 시작: $LAST_WEEK_START)"
          fi
          
          # 4. 최종 판단: 새로운 주이고 같은 주 기록이 없을 때만 추가
          if [ "$IS_NEW_WEEK" = true ] && [ "$IS_SAME_WEEK" = false ]; then
            echo "새 기록 추가 필요 (새 주: $IS_NEW_WEEK, 같은 주 기록 없음: $([ "$IS_SAME_WEEK" = false ] && echo true || echo false))"
            echo "should_add=true" >> $GITHUB_OUTPUT
            echo "reason=새로운 주 시작" >> $GITHUB_OUTPUT
          else
            echo "새 기록 추가 불필요 (새 주: $IS_NEW_WEEK, 같은 주 기록 없음: $([ "$IS_SAME_WEEK" = false ] && echo true || echo false))"
            echo "should_add=false" >> $GITHUB_OUTPUT
            echo "reason=기존 주 업데이트" >> $GITHUB_OUTPUT
          fi

      - name: Get user info and commits
        id: get_commits
        if: steps.skip_check.outputs.should_skip == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e  # 에러 발생 시 즉시 중단
          USERNAME="${{ github.repository_owner }}"
          WEEK_START="${{ steps.week_range.outputs.week_start }}"
          WEEK_END="${{ steps.week_range.outputs.week_end }}"
          EXCLUDED_REPOS="weekly-commit-challenge"
          
          echo "사용자: $USERNAME"
          echo "조회 기간: $WEEK_START ~ $WEEK_END"
          
          # 한국 시간을 UTC로 변환
          SINCE_UTC=$(TZ='UTC' date -d "$WEEK_START 00:00:00 KST" -Iseconds)
          UNTIL_UTC=$(TZ='UTC' date -d "$WEEK_END 23:59:59 KST" -Iseconds)
          
          echo "UTC 조회 기간: $SINCE_UTC ~ $UNTIL_UTC"
          
          # GraphQL 쿼리 생성
          cat > query.json << EOF
          {
            "query": "query(\$username: String!, \$from: DateTime!, \$to: DateTime!) { user(login: \$username) { avatarUrl contributionsCollection(from: \$from, to: \$to) { totalCommitContributions commitContributionsByRepository { repository { name owner { login } } contributions { totalCount } } } } }",
            "variables": {
              "username": "$USERNAME",
              "from": "$SINCE_UTC",
              "to": "$UNTIL_UTC"
            }
          }
          EOF
          
          # GraphQL API 호출 (재시도 로직 포함)
          for i in {1..3}; do
            echo "GraphQL API 호출 시도 $i/3"
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d @query.json \
              "https://api.github.com/graphql")
            
            # API 응답 유효성 검사
            if echo "$RESPONSE" | jq -e '.data' >/dev/null 2>&1; then
              echo "GraphQL API 응답 성공"
              echo "GraphQL 응답: $RESPONSE"
              break
            elif [ $i -eq 3 ]; then
              echo "ERROR: GraphQL API 호출 실패 (3회 시도 후): $RESPONSE"
              echo "avatar_url=" >> $GITHUB_OUTPUT
              echo "commit_count=0" >> $GITHUB_OUTPUT
              echo "user_exists=false" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "WARNING: GraphQL API 호출 실패, 재시도 중... ($RESPONSE)"
              sleep 2
            fi
          done
          
          # 사용자 존재 확인
          USER_EXISTS=$(echo "$RESPONSE" | jq -r '.data.user // null')
          if [ "$USER_EXISTS" = "null" ]; then
            echo "ERROR: 사용자 '$USERNAME'을 찾을 수 없습니다"
            echo "avatar_url=" >> $GITHUB_OUTPUT
            echo "commit_count=0" >> $GITHUB_OUTPUT
            echo "user_exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 아바타 URL 추출
          AVATAR_URL=$(echo "$RESPONSE" | jq -r '.data.user.avatarUrl // ""')
          
          # 커밋 수 계산 (제외할 저장소 필터링)
          COMMIT_COUNT=$(echo "$RESPONSE" | jq --arg excluded "$EXCLUDED_REPOS" '
            .data.user.contributionsCollection.commitContributionsByRepository
            | map(select(.repository.name as $repo_name | ($excluded | split(",") | index($repo_name) | not)))
            | map(.contributions.totalCount)
            | add // 0
          ')
          
          echo "아바타 URL: $AVATAR_URL"
          echo "커밋 수: $COMMIT_COUNT"
          
          echo "avatar_url=$AVATAR_URL" >> $GITHUB_OUTPUT
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "user_exists=true" >> $GITHUB_OUTPUT

      - name: Remove duplicates from existing records
        if: steps.skip_check.outputs.should_skip == 'false' && steps.existing_records.outputs.has_records == 'true'
        run: |
          echo "기존 기록 중복 제거 및 정규화 중..."
          
          if [ -f record.json ]; then
            # 원본 개수 확인
            ORIGINAL_COUNT=$(cat record.json | jq '.records | length' 2>/dev/null || echo "0")
            echo "원본 기록 수: $ORIGINAL_COUNT개"
            
            # 중복 제거 및 정규화
            CLEANED_RECORDS=$(cat record.json | jq --arg username "${{ github.repository_owner }}" '
              # 1. 기본 구조 보장
              .username = $username |
              .records = (.records // []) |
              
              # 2. 각 기록의 필수 필드 정규화
              .records |= map(
                # weekStart가 없으면 period를 키로 사용
                if .weekStart and .weekStart != "" then
                  .
                else
                  . + {"weekStart": (.period // ""), "weekEnd": (.period // "")}
                end |
                
                # 필수 필드 보장 (ID가 0이면 임시로 큰 수 할당)
                .id = (if .id and .id > 0 then .id else 9999 end) |
                .commits = (.commits // 0) |
                .success = (.success // (.commits > 0)) |
                .status = (.status // (if .commits > 0 then "✅ 성공" else "❌ 실패" end))
              ) |
              
              # 3. period 기준으로 중복 제거 (더 확실한 방법)
              .records |= (
                group_by(.period) |
                map(
                  # 같은 그룹에서 ID가 가장 큰 것 선택, weekStart가 있는 것 우선
                  max_by([(.weekStart != "" and .weekStart != null), .id // 0])
                ) |
                sort_by(.id // 0)
              ) |
              
              # 4. ID 재정렬 (1부터 순차적으로)
              .records |= (
                to_entries |
                map(.value.id = (.key + 1)) |
                map(.value)
              )
            ')
            
            # 결과 확인
            CLEANED_COUNT=$(echo "$CLEANED_RECORDS" | jq '.records | length')
            echo "정리 후 기록 수: $CLEANED_COUNT개"
            
            # 변경사항이 있으면 파일 업데이트
            if [ "$ORIGINAL_COUNT" != "$CLEANED_COUNT" ] || ! echo "$CLEANED_RECORDS" | jq -e '. == '"$(cat record.json)"'' >/dev/null 2>&1; then
              echo "$CLEANED_RECORDS" > record.json
              echo "중복 제거 및 정규화 완료: $ORIGINAL_COUNT개 → $CLEANED_COUNT개"
            else
              echo "변경사항 없음 ($ORIGINAL_COUNT개 유지)"
            fi
          fi

      - name: Update or create record
        if: steps.skip_check.outputs.should_skip == 'false' && (steps.should_add_record.outputs.should_add == 'true' || steps.existing_records.outputs.has_records == 'true')
        run: |
          USERNAME="${{ github.repository_owner }}"
          AVATAR_URL="${{ steps.get_commits.outputs.avatar_url }}"
          COMMIT_COUNT="${{ steps.get_commits.outputs.commit_count }}"
          WEEK_START="${{ steps.week_range.outputs.week_start }}"
          WEEK_END="${{ steps.week_range.outputs.week_end }}"
          WEEK_NUMBER="${{ steps.week_range.outputs.week_number }}"
          YEAR="${{ steps.week_range.outputs.year }}"
          SHOULD_ADD="${{ steps.should_add_record.outputs.should_add }}"
          REASON="${{ steps.should_add_record.outputs.reason }}"
          
          # 성공 여부 판단
          if [ $COMMIT_COUNT -gt 0 ]; then
            SUCCESS="true"
            STATUS="✅ 성공"
          else
            SUCCESS="false"
            STATUS="❌ 실패"
          fi
          
          # 주차 기간 표시 형식 (MM/DD)
          PERIOD_START=$(TZ='Asia/Seoul' date -d "$WEEK_START" '+%m/%d')
          PERIOD_END=$(TZ='Asia/Seoul' date -d "$WEEK_END" '+%m/%d')
          PERIOD="$PERIOD_START ~ $PERIOD_END"
          
          echo "기록 업데이트 중..."
          echo "사유: $REASON"
          echo "기간: $PERIOD (${YEAR}년 ${WEEK_NUMBER}주차)"
          echo "커밋: $COMMIT_COUNT개 ($STATUS)"
          
          # ID 미리 계산
          if [ "$SHOULD_ADD" = "true" ]; then
            # 새 기록 추가 모드 - 마지막 ID + 1
            if [ -f record.json ]; then
              RECORD_ID=$(cat record.json | jq '.records | length + 1')
            else
              RECORD_ID=1
            fi
          else
            # 기존 기록 업데이트 모드 - 기존 ID 유지 (없으면 1)
            if [ -f record.json ]; then
              RECORD_ID=$(cat record.json | jq --arg weekStart "$WEEK_START" '.records[] | select(.weekStart == $weekStart) | .id // 1' | head -1)
              if [ -z "$RECORD_ID" ] || [ "$RECORD_ID" = "null" ]; then
                RECORD_ID=1
              fi
            else
              RECORD_ID=1
            fi
          fi
          
          echo "할당된 ID: $RECORD_ID"
          
          # 새 기록 데이터 (완전한 구조)
          NEW_RECORD=$(jq -n \
            --argjson id "$RECORD_ID" \
            --arg period "$PERIOD" \
            --arg week "${YEAR}년 ${WEEK_NUMBER}주차" \
            --argjson commits "$COMMIT_COUNT" \
            --arg status "$STATUS" \
            --argjson success "$SUCCESS" \
            --arg weekStart "$WEEK_START" \
            --arg weekEnd "$WEEK_END" \
            '{
              "id": $id,
              "period": $period,
              "week": $week,
              "commits": $commits,
              "status": $status,
              "success": $success,
              "weekStart": $weekStart,
              "weekEnd": $weekEnd
            }'
          )
          
          if [ "$SHOULD_ADD" = "true" ]; then
            echo "새 기록 추가 모드"
            
            # 기존 기록이 있으면 가져오기
            if [ -f record.json ]; then
              EXISTING_RECORDS=$(cat record.json | jq '.records')
            else
              EXISTING_RECORDS="[]"
            fi
            
            # 새 기록을 기존 기록에 추가
            UPDATED_RECORDS=$(echo "$EXISTING_RECORDS" | jq ". + [$NEW_RECORD]")
            
          else
            echo "기존 기록 업데이트 모드"
            
            # 기존 기록에서 현재 주 기록 찾아서 업데이트
            EXISTING_RECORDS=$(cat record.json | jq '.records')
            UPDATED_RECORDS=$(echo "$EXISTING_RECORDS" | jq --arg weekStart "$WEEK_START" --argjson newRecord "$NEW_RECORD" '
              map(if .weekStart == $weekStart then 
                $newRecord
              else 
                . 
              end)
            ')
          fi
          
          # 최종 JSON 생성 (안전한 방식)
          if ! jq -n \
            --arg username "$USERNAME" \
            --arg avatarUrl "$AVATAR_URL" \
            --arg lastUpdated "$(TZ='Asia/Seoul' date -Iseconds)" \
            --argjson records "$UPDATED_RECORDS" \
            '{
              "username": $username,
              "avatarUrl": $avatarUrl,
              "lastUpdated": $lastUpdated,
              "records": $records
            }' > record.json; then
            echo "ERROR: record.json 생성 실패"
            exit 1
          fi
          
          # JSON 유효성 검사
          if ! jq empty record.json 2>/dev/null; then
            echo "ERROR: 생성된 record.json이 유효하지 않음"
            exit 1
          fi
          
          echo "record.json 업데이트 완료"

      - name: Update record.md
        if: steps.skip_check.outputs.should_skip == 'false' && (steps.should_add_record.outputs.should_add == 'true' || steps.existing_records.outputs.has_records == 'true')
        run: |
          USERNAME="${{ github.repository_owner }}"
          
          echo "record.md 업데이트 중..."
          
          # record.md 생성
          cat > record.md << EOF
          # $USERNAME - Weekly Commit Challenge Record
          
          ## 📊 기록 테이블
          
          | ID | 기간 | 주차 | 커밋 수 | 성공 여부 |
          | --- | --- | --- | --- | --- |
          EOF
          
          # record.json에서 데이터 읽어서 테이블 생성
          cat record.json | jq -r '.records[] | "| \(.id) | \(.period) | \(.week) | \(.commits) | \(.status) |"' >> record.md
          
          echo "record.md 업데이트 완료"


      - name: Commit and push changes
        if: steps.skip_check.outputs.should_skip == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 변경된 파일 추가
          git add record.json record.md
          
          # Fork 사용자의 경우 삭제된 워크플로우도 추가
          if [ "${{ github.repository_owner }}" != "tlqhrm" ]; then
            git add .github/workflows/ || true
          fi
          
          # 변경사항이 있는지 확인
          if ! git diff --staged --quiet; then
            CURRENT_TIME=$(TZ='Asia/Seoul' date '+%m/%d %H:%M')
            WEEK_NUMBER="${{ steps.week_range.outputs.week_number }}"
            REASON="${{ steps.should_add_record.outputs.reason }}"
            
            git commit -m "📊 ${WEEK_NUMBER}주차 위클리 커밋 챌린지 기록 업데이트 ($REASON) - $CURRENT_TIME"
            
            echo "변경사항 푸시 중..."
            git push
            echo "기록 업데이트 완료"
          else
            echo "변경사항이 없어 커밋하지 않습니다"
          fi