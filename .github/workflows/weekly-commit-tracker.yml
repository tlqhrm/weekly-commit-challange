name: Weekly Commit Tracker

on:
  schedule:
    # 매일 2번 실행 (한국시간 오전 9시, 오후 9시)
    - cron: '0 0 * * *'   # 매일 UTC 00:00 (한국시간 09:00)
    - cron: '0 12 * * *'  # 매일 UTC 12:00 (한국시간 21:00)
  workflow_dispatch: # 수동 실행 가능

jobs:
  track-commits:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # OIDC 토큰 생성 권한
      contents: read    # 저장소 읽기 권한
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check weekly commits across all repositories
        id: check_commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 주차 기준으로 커밋 확인 (KST 기준)
          USERNAME="${{ github.repository_owner }}"
          NOW=$(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S')
          
          # 현재 요일 확인 (1=월요일, 7=일요일)
          CURRENT_WEEKDAY=$(TZ='Asia/Seoul' date '+%u')
          
          echo "Current time (KST): $NOW"
          echo "Current weekday: $CURRENT_WEEKDAY (1=Monday, 7=Sunday)"
          echo "Checking commits for user: $USERNAME"
          
          # 제외할 레포지토리 목록 (쉼표로 구분)
          EXCLUDED_REPOS="weekly-commit-challange"
          
          if [ "$CURRENT_WEEKDAY" -eq 1 ]; then
            # 월요일: 지난주 월요일 ~ 일요일 (7일 전 ~ 1일 전)
            WEEK_START=$(TZ='Asia/Seoul' date -d '7 days ago' '+%Y-%m-%d')
            WEEK_END=$(TZ='Asia/Seoul' date -d '1 day ago' '+%Y-%m-%d')
            PERIOD_TYPE="지난주"
          else
            # 화~일요일: 이번주 월요일 ~ 어제까지
            DAYS_SINCE_MONDAY=$((CURRENT_WEEKDAY - 1))
            WEEK_START=$(TZ='Asia/Seoul' date -d "$DAYS_SINCE_MONDAY days ago" '+%Y-%m-%d')
            WEEK_END=$(TZ='Asia/Seoul' date -d '1 day ago' '+%Y-%m-%d')
            PERIOD_TYPE="이번주"
          fi
          
          echo "Period type: $PERIOD_TYPE"
          echo "Week start: $WEEK_START (Monday)"
          echo "Week end: $WEEK_END"
          
          # ISO 8601 형식으로 변환
          SINCE_DATE=$(TZ='Asia/Seoul' date -d "$WEEK_START 00:00:00" -Iseconds)
          UNTIL_DATE=$(TZ='Asia/Seoul' date -d "$WEEK_END 23:59:59" -Iseconds)
          
          # GitHub GraphQL API로 정확한 커밋 수 가져오기
          echo "🔍 GraphQL API로 커밋 수 확인 중..."
          
          GRAPHQL_QUERY=$(cat <<'EOF'
{
  "query": "query($username: String!, $from: DateTime!, $to: DateTime!) {
    user(login: $username) {
      contributionsCollection(from: $from, to: $to) {
        totalCommitContributions
        commitContributionsByRepository {
          repository {
            name
            owner { login }
          }
          contributions {
            totalCount
          }
        }
      }
    }
  }",
  "variables": {
    "username": "'"$USERNAME"'",
    "from": "'"$SINCE_DATE"'",
    "to": "'"$UNTIL_DATE"'"
  }
}
EOF
          )
          
          # GraphQL API 호출
          GRAPHQL_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY" \
            "https://api.github.com/graphql")
          
          echo "GraphQL Response: $GRAPHQL_RESPONSE"
          
          # GraphQL 응답에서 오류 확인
          ERROR_CHECK=$(echo "$GRAPHQL_RESPONSE" | jq '.errors // empty')
          if [ -n "$ERROR_CHECK" ]; then
            echo "❌ GraphQL API 오류 발생:"
            echo "$ERROR_CHECK"
            exit 1
          fi
          
          # 제외할 저장소를 필터링하여 커밋 수 계산
          COMMIT_COUNT=$(echo "$GRAPHQL_RESPONSE" | jq --arg excluded "$EXCLUDED_REPOS" '
            .data.user.contributionsCollection.commitContributionsByRepository
            | map(select(.repository.name as $repo_name | ($excluded | split(",") | index($repo_name) | not)))
            | map(.contributions.totalCount)
            | add // 0
          ')
          
          # 커밋 수 검증
          if [ -z "$COMMIT_COUNT" ] || [ "$COMMIT_COUNT" = "null" ]; then
            echo "⚠️ 커밋 수를 계산할 수 없습니다. 0으로 설정합니다."
            COMMIT_COUNT=0
          fi
          
          echo "Commit count for $PERIOD_TYPE ($WEEK_START ~ $WEEK_END): $COMMIT_COUNT"
          
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "period_start=$WEEK_START" >> $GITHUB_OUTPUT
          echo "period_end=$WEEK_END" >> $GITHUB_OUTPUT
          echo "period_type=$PERIOD_TYPE" >> $GITHUB_OUTPUT
          
          if [ $COMMIT_COUNT -gt 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Calculate week number
        id: week_number
        run: |
          # README에서 현재 주차 확인
          if grep -q "## 📊 위클리 커밋 챌린지 기록" README.md; then
            CURRENT_WEEK=$(grep -o "[0-9]*주차" README.md | tail -1 | grep -o "[0-9]*" || echo "0")
          else
            CURRENT_WEEK=0
          fi
          
          NEW_WEEK=$((CURRENT_WEEK + 1))
          echo "week_number=$NEW_WEEK" >> $GITHUB_OUTPUT
          echo "Current week: $CURRENT_WEEK, New week: $NEW_WEEK"

      - name: Get GitHub OIDC Token
        id: get_token
        run: |
          # GitHub Actions OIDC 토큰 가져오기
          OIDC_TOKEN=$(curl -sLS "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=weekly-commit-challenge" \
            -H "User-Agent: actions/oidc-client" \
            -H "Authorization: Bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
            | jq -r '.value')
          
          echo "oidc_token=$OIDC_TOKEN" >> $GITHUB_OUTPUT
          echo "✅ OIDC Token obtained successfully"

      - name: Send weekly data to Lambda via API Gateway (OIDC)
        env:
          API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
        run: |
          # API 설정이 있는 경우에만 전송
          if [ -n "$API_ENDPOINT" ]; then
            COMMIT_COUNT="${{ steps.check_commits.outputs.commit_count }}"
            SUCCESS="${{ steps.check_commits.outputs.success }}"
            WEEK_NUM="${{ steps.week_number.outputs.week_number }}"
            USERNAME="${{ github.repository_owner }}"
            PERIOD_START="${{ steps.check_commits.outputs.period_start }}"
            PERIOD_END="${{ steps.check_commits.outputs.period_end }}"
            CURRENT_TIME=$(TZ='Asia/Seoul' date -Iseconds)
            YEAR=$(TZ='Asia/Seoul' date '+%Y')
            OIDC_TOKEN="${{ steps.get_token.outputs.oidc_token }}"
            
            # OIDC 토큰과 함께 데이터 생성
            PAYLOAD="{\"username\":\"$USERNAME\",\"year\":$YEAR,\"weekNumber\":$WEEK_NUM,\"commitCount\":$COMMIT_COUNT,\"success\":$SUCCESS,\"periodStart\":\"$PERIOD_START\",\"periodEnd\":\"$PERIOD_END\",\"lastUpdated\":\"$CURRENT_TIME\",\"repository\":\"${{ github.repository }}\",\"runId\":\"${{ github.run_id }}\",\"sha\":\"${{ github.sha }}\",\"actor\":\"${{ github.actor }}\"}"
            
            echo "Lambda로 주간 데이터 전송 중 (OIDC 인증)..."
            RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "$API_ENDPOINT/weekly-commit-record" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OIDC_TOKEN" \
              -d "$PAYLOAD")
            
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
            
            if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
              echo "✅ Lambda 응답 성공 (HTTP $HTTP_CODE): $RESPONSE_BODY"
              echo "✅ DynamoDB에 데이터가 업데이트되었습니다."
            else
              echo "⚠️ Lambda 응답 실패 (HTTP $HTTP_CODE): $RESPONSE_BODY"
              echo "⚠️ API 전송 실패 (무시하고 계속)"
            fi
          else
            echo "ℹ️ API_ENDPOINT가 설정되지 않았습니다. README만 업데이트합니다."
          fi

      - name: Update record.md with tracking record (Daily sync)
        run: |
          COMMIT_COUNT="${{ steps.check_commits.outputs.commit_count }}"
          SUCCESS="${{ steps.check_commits.outputs.success }}"
          WEEK_NUM="${{ steps.week_number.outputs.week_number }}"
          PERIOD_START="${{ steps.check_commits.outputs.period_start }}"
          PERIOD_END="${{ steps.check_commits.outputs.period_end }}"
          
          # 현재 연도 가져오기
          YEAR=$(TZ='Asia/Seoul' date '+%Y')
          
          # 주차의 실제 시작일(월요일)과 종료일(일요일) 계산
          # PERIOD_START를 기준으로 그 주의 월요일 찾기
          START_DATE=$(TZ='Asia/Seoul' date -d "$PERIOD_START" '+%Y-%m-%d')
          START_WEEKDAY=$(TZ='Asia/Seoul' date -d "$START_DATE" '+%u') # 1=월요일, 7=일요일
          
          # 월요일까지 날짜를 뒤로 이동
          DAYS_TO_SUBTRACT=$((START_WEEKDAY - 1))
          MONDAY=$(TZ='Asia/Seoul' date -d "$START_DATE - $DAYS_TO_SUBTRACT days" '+%m/%d')
          
          # 일요일 계산 (월요일 + 6일)
          SUNDAY=$(TZ='Asia/Seoul' date -d "$START_DATE - $DAYS_TO_SUBTRACT days + 6 days" '+%m/%d')
          
          # 기간 포맷: M/D ~ M/D 형태
          WEEK_PERIOD="$MONDAY ~ $SUNDAY"
          
          # 진행중/완료 상태 설정
          CURRENT_TIME=$(TZ='Asia/Seoul' date '+%Y-%m-%d')
          if [ "$SUCCESS" = "true" ]; then
            STATUS_EMOJI="✅ 성공"
            BADGE="![Weekly Commit Challenge](https://img.shields.io/badge/Weekly%20Commit%20Challenge-${WEEK_NUM}주차%20성공-brightgreen)"
          else
            STATUS_EMOJI="🔄 진행중 ($COMMIT_COUNT개)"
            BADGE="![Weekly Commit Challenge](https://img.shields.io/badge/Weekly%20Commit%20Challenge-${WEEK_NUM}주차%20진행중-blue)"
          fi
          
          # JSON 형태로 기록 생성 (API용)
          RECORD_JSON="{\"period\":\"$WEEK_PERIOD\",\"year\":$YEAR,\"weekNumber\":$WEEK_NUM,\"commitCount\":$COMMIT_COUNT,\"success\":$SUCCESS,\"status\":\"$STATUS_EMOJI\",\"lastUpdated\":\"$(TZ='Asia/Seoul' date -Iseconds)\"}"
          
          # record.md 업데이트 (JSON과 마크다운 테이블 병행)
          cat > record.md << EOL
# ${{ github.repository_owner }} - Weekly Commit Challenge Record

## 📊 JSON Data

\`\`\`json
$RECORD_JSON
\`\`\`

EOL
          
          # 테이블 형태 기록도 record.md에 추가
          NEW_RECORD="| $WEEK_PERIOD | ${YEAR}년 ${WEEK_NUM}주차 | $COMMIT_COUNT | $STATUS_EMOJI |"
          CURRENT_WEEK_PATTERN="${YEAR}년 ${WEEK_NUM}주차"
          
          # record.md에 테이블 섹션도 추가
          if grep -q "## 📊 기록 테이블" record.md; then
            # 현재 주차 기록이 이미 있는지 확인
            if grep -q "$CURRENT_WEEK_PATTERN" record.md; then
              # 현재 주차 기록을 업데이트 (REPLACE)
              sed -i "/$CURRENT_WEEK_PATTERN/c\\$NEW_RECORD" record.md
              echo "📝 현재 주차 기록이 업데이트되었습니다: $CURRENT_WEEK_PATTERN"
            else
              # 새로운 주차 기록 추가
              sed -i "/| --- | --- | --- | --- |/a $NEW_RECORD" record.md
              echo "📝 새로운 주차 기록이 추가되었습니다: $CURRENT_WEEK_PATTERN"
            fi
          else
            # 테이블 섹션 추가
            {
              echo ""
              echo "## 📊 기록 테이블"
              echo ""
              echo "| 기간 | 주차 | 커밋 수 | 성공 여부 |"
              echo "| --- | --- | --- | --- |"
              echo "$NEW_RECORD"
            } >> record.md
            echo "📝 기록 테이블 섹션이 생성되었습니다."
          fi

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add record.md
          
          # 변경사항이 있을 때만 커밋
          if ! git diff --staged --quiet; then
            CURRENT_TIME=$(TZ='Asia/Seoul' date '+%m/%d %H:%M')
            git commit -m "📊 ${{ steps.week_number.outputs.week_number }}주차 위클리 커밋 챌린지 기록 업데이트 ($CURRENT_TIME)"
            git push
            echo "✅ record.md 업데이트 완료"
          else
            echo "ℹ️ 변경사항이 없어 커밋하지 않습니다."
          fi